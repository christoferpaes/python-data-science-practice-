# -*- coding: utf-8 -*-
"""a7.ipynb

Automatically generated by Colaboratory.



# Assignment 7 Clustering


## Learning Objectives

* Identify clustering learning algorithms
* Identify what is K-means clustering and how it works
* Apply K-means to build data models
* Analyze and communicate analysis results by applying K-means to learn from data

# Meet Ups

Assume that we want to celebrate our accomplishments on data analysis and visualization. In the following three problems, you need to organize several in-person meet-ups for your hometown classmates.  You know the locations of all your local classmates, which are specified a list of lists in the below code cell. Each inner list is a pair,

<span class="math-inline">\[x,y\]</span>

where <span class="math-inline">x</span> stands for the number of blocks east of your home city center and <span class="math-inline">y</span> stands for the number of blocks north of the city center.

That is, if x = -14, the location is located 14 blocks west of the home city; if y = 13, the location is located 13 blocks north of the home city center. If [x,y] is [-14, -5], which is the first location on the below list, it means the location is 14 blocks west and 5 blocks south of the home city center.   

You need to group the local classmates appropriately and choose meetup locations for everyone to attend conveniently.
"""

# Do not change the below statement
inputs = [[-14, -5], [13, 13], [20, 23], [-19, -11], [-9, -16], [21, 27],
          [-49, 15], [26, 13], [-46, 5], [-34, -1], [11, 15],
          [-49, 0], [-22, -16], [19, 28], [-12, -8], [-13, -19], [-41, 8],
          [-11, -6], [-25, -9], [-18, -3]]


"""## Problem 1: Plotting the Locations

For this problem, you need to plot the locations of the local classmates so that your local classmates' locations could be visualized easily.  
"""


def minkowskiDist(v1, v2, p):
  """Calculates Minkowski distance between two vectors."""
  dist = 0
  for i in range(len(v1)):
    dist += abs(v1[i] - v2[i]) ** p
  return dist**(1/p)


def distanceFormula(x2, x1, y1, y2):
  """Calculates Euclidean distance between two points."""
  distance = 0
  for k in range(len(x1)):
    y3 = (x2 - x1) ** 2 + (y2 - y1) ** 2
    distance += math.sqrt(y3)
  return distance


def plotInputs(x):
  """Plots the locations of classmates."""
  fig, ax = plt.subplots(figsize=(25, 12))
  x1, y1 = map(list, zip(*x))
  ax.scatter(x1, y1, s=300, marker='o', color='b')
  ax.scatter([23], [28], marker='<', color='r')
  ax.scatter([-8], [-5.5], marker='<', color='r')
  ax.scatter([21], [27], marker='o', color='r')
  ax.scatter([19], [28], marker='o', color='r')
  ax.scatter([-11], [-6], marker='o', color='g')
  ax.scatter([-12], [-8], marker='o', color='g')
  plt.show()


def demoCluster(x):
  """Performs K-Means clustering with 3 clusters and visualizes the results."""
  kmeans = KMeans(n_clusters=3)
  kmeans.fit(x)
  print(kmeans.cluster_centers_)
  print(kmeans.labels_)
  plt.scatter(x[:, 0],
