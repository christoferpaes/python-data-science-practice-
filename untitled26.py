# -*- coding: utf-8 -*-
"""Untitled26.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PbyWwC8XEPYDTDhChe3Eew_d2VfHF8Od
"""

import random

def simulate_one_detection():
    for _ in range(44):  # 44 students in the class
        if random.random() < (1/132):  # Probability of one trainer noticing (1/44 * 3 trainers)
            return True
    return False

def run_simulation(num_simulations):
    detections = 0
    for _ in range(num_simulations):
        if simulate_one_detection():
            detections += 1
    return detections / num_simulations

num_simulations = 100000  # Adjust as needed for desired level of accuracy

probability = run_simulation(num_simulations)
print(f"The estimated probability of one trainer detecting the looped video feed is approximately {probability:.2%}")

import random
import plotly.graph_objects as go

def simulate_one_detection():
    for _ in range(44):
        if random.random() < (1/132):
            return True
    return False

def run_simulation(num_simulations):
    detections = 0
    probabilities = []

    for _ in range(num_simulations):
        if simulate_one_detection():
            detections += 1
        probability = detections / (num_simulations)
        probabilities.append(probability)

    return probabilities

num_simulations = 1000
probabilities = run_simulation(num_simulations)

# Create a time axis (in hours)
time_axis = [i for i in range(num_simulations)]

# Create a figure with Plotly
fig = go.Figure()
fig.add_trace(go.Scatter(x=time_axis, y=probabilities, mode='lines', name='Probability'))

# Add title and labels
fig.update_layout(title='Probability of Trainer Detection Over Time',
                  xaxis_title='Time (hours)',
                  yaxis_title='Probability')

# Show the plot
fig.show()

import random
import plotly.graph_objects as go

def simulate_detection_with_noise():
    detections = 0
    for _ in range(44):
        for _ in range(8 * 60):  # Simulating 8 hours (in minutes)
            if random.random() < (1/500):  # Adjust the probability value here
                detections += 1
                break
    return detections / 44  # Return the average detections per trainer

def run_simulation_with_noise(num_simulations):
    detections = 0
    probabilities = []

    for _ in range(num_simulations):
        detections += simulate_detection_with_noise()
        probability = detections / ((num_simulations) * 44)  # Total trainers
        probabilities.append(probability)

    return probabilities

num_simulations = 1000
probabilities_with_noise = run_simulation_with_noise(num_simulations)

# Create a time axis (in hours)
time_axis = [i for i in range(num_simulations)]

# Create a figure with Plotly for comparison
fig = go.Figure()
fig.add_trace(go.Scatter(x=time_axis, y=probabilities_with_noise, mode='lines', name='Probability (With Noise)'))

# Add title and labels
fig.update_layout(title='Probability of Trainer Detection Over Time (With Noise)',
                  xaxis_title='Time (hours)',
                  yaxis_title='Probability')

# Show the plot
fig.show()